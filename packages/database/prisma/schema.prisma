// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Venue      Venue[]
}

model Venue {
  id              String         @id @default(uuid())
  name            String
  organization_id String
  timezone        String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  Space           Space[]
  Organization    Organization   @relation(fields: [organization_id], references: [id])
  Availability    Availability[]
}

model Space {
  id           String         @id @default(uuid())
  name         String
  capacity     Int?
  floor        Int?
  venue_id     String
  venue        Venue          @relation(fields: [venue_id], references: [id])
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Availability Availability[]
  Event        Event[]
}

model Availability {
  id         String   @id @default(uuid())
  venue_id   String?
  space_id   String?
  timezone   String
  /// [AvailabilityRules]
  rules      Json
  venue      Venue?   @relation(fields: [venue_id], references: [id], onDelete: Cascade)
  space      Space?   @relation(fields: [space_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Event {
  id               String   @id @default(uuid())
  event_request_id String?
  space_id         String
  title            String
  description      String?
  timezone         String
  price            Int?
  /// [Interval]
  interval         Json
  /// [RecurrenceRule]
  recurrence_rule  Json?
  /// [EventStatus] 
  status           String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  Space        Space?        @relation(fields: [space_id], references: [id])
  EventRequest EventRequest? @relation(fields: [event_request_id], references: [id])
}

model EventTemplate {
  id String @id @default(uuid()) // UUID as the primary key

  title       String // Title of the event template
  duration    Int // Duration in minutes
  price       Int?
  description String?

  /// [AccessibilityType]
  accessibility String  @default("STAFF_ONLY")
  auto_confirm  Boolean @default(false) // Автоматическое подтверждение для специалистов без организации
  is_active     Boolean @default(true) // Активен ли шаблон сейчас

  created_at   DateTime       @default(now()) // Creation timestamp
  updated_at   DateTime       @updatedAt // Last update timestamp
  EventRequest EventRequest[]
}

model EventRequest {
  id                String    @id @default(uuid())
  event_template_id String
  preferred_time    DateTime?

  title_snapshot       String
  duration_snapshot    Int
  description_snapshot String?
  price_snapshot       Int?

  /// [EventRequestStatus] 
  status           String        @default("PENDING")
  comment          String?
  response_comment String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  EventTemplate    EventTemplate @relation(fields: [event_template_id], references: [id])
  Event            Event[]
}
